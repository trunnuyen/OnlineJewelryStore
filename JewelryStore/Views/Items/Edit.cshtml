@model JewelryStore.Models.Item

@{
	ViewBag.Title = "Edit";
	Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<head>
	<script src="~/Scripts/tinymce/js/tinymce/tinymce.min.js"></script>

	<script>tinymce.init({ selector: 'textarea' });</script>
	<style>
		.editor-field textarea {
			width: 400px;
			height: 100px;
		}
	</style>



</head>
<h2>Edit</h2>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal" style="background-color:#33475b">
		<h4>Item</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.ID)

		<div class="form-group">
			@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.PurcharsePrice, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.PurcharsePrice, new { htmlAttributes = new { @class = "form-control", required = "required" } })
				@Html.ValidationMessageFor(model => model.PurcharsePrice, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.SellPrice, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.SellPrice, new { htmlAttributes = new { @class = "form-control", required = "required" } })
				@Html.ValidationMessageFor(model => model.SellPrice, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.DateImport, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.DateImport, new { htmlAttributes = new { @class = "form-control", required = "required" } })
				@Html.ValidationMessageFor(model => model.DateImport, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", required = "required" } })
				@Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.TypeID, "TypeID", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("TypeID", null, htmlAttributes: new { @class = "form-control", required = "required" })
				@Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.BrandID, "BrandID", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("BrandID", null, htmlAttributes: new { @class = "form-control", required = "required" })
				@Html.ValidationMessageFor(model => model.BrandID, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Picture, new { htmlAttributes = new { @class = "form-control", @id = "picture", @name = "picture", required = "required" } })
				<input type="button" id="btnUpload" value="..." class="btn btn-success" />
				<input type="file" id="fileUpload" accept="image/*" name="fileUpload" style="display:none" ; />
				@Html.ValidationMessageFor(model => model.Picture, "", new { @class = "text-danger" })
				<img id="pictureUpload" width="100" src="" />
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.ShortTitle, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.ShortTitle, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.ShortTitle, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Describe, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@*@Html.EditorFor(model => model.Describe, new { htmlAttributes = new { @class = "form-control" } })
		@Html.ValidationMessageFor(model => model.Describe, "", new { @class = "text-danger" })*@
				@Html.TextAreaFor(model => model.Describe, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Save" class="btn btn-default" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>
@section upload
{
	<script>
		$(function () {
			// đăng kí sự kiện click của nút btnUpload
			$('#btnUpload').click(function () {
				$('#fileUpload').trigger('click');
			});
			//Bat sự kiện change data cua fileUpload
			$('#fileUpload').change(function () {
				// kiểm tra trình duyệt có hỗ trợ Form data object hay ko
				if (window.FormData !== undefined) {
					//lấy dữ liệu trên fileUpload
					var fileUpload = $('#fileUpload').get(0);
					var files = fileUpload.files;
					//tạo đối tượng formdata
					var formData = new FormData();
					//dđưa dữ liệu vào form
					formData.append('file', files[0]);
					$.ajax({
						type: 'POST',
						url: '/Image/ProcessUpload',  // đường dẫn upload
						contentType: false, // khoong có header
						processData: false, // không xử lí dữ liệu
						data: formData,
						success: function (urlImage) {
							//hiện hình

							// $('#pictureUpload').attr('src', urlImage);
							$('#picture').val(urlImage);
							document.getElementById("pictureUpload").src = "/img/Item/" + urlImage;
						},
						error: function (err) {
							aler('Error: ' + err.statusText);
						}
					});
				}
			});
		});
	</script>

}